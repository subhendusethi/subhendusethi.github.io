{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/closure-snake","result":{"data":{"post":{"__typename":"MdxPost","slug":"/closure-snake","title":"Closures: keep them in your memory","date":"03.10.2020","tags":[{"name":"code","slug":"code"},{"name":"python","slug":"python"},{"name":"üêç","slug":"üêç"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Closures: keep them in your memory\",\n  \"date\": \"2020-10-03T00:00:00.000Z\",\n  \"slug\": \"/closure-snake\",\n  \"tags\": [\"code\", \"python\", \"üêç\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Recap to inner-function/nested functions in Python\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def factorial(N):\\n    if N < 0:\\n        raise ValueError(\\\"Sorry. We don't do that here...\\\")\\n    def compute_factorial(N, accumulated=1):\\n        if N<=1:\\n            return accumulated\\n        return compute_factorial(N-1, N*accumulated)\\n    return compute_factorial(N)\\n''' \\n>>> factorial(10)\\n3628800\\n\\n>>> compute_factorial\\nTraceback (most recent call last):\\n File \\\"<stdin>\\\", line 1, in <module>\\nNameError: name 'compute_factorial' is not defined\\n'''\\n\")), mdx(\"p\", null, \"Here we see the inner function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compute_factorial\"), \" being used from the outer-scope of the\\nmethod \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"factorial\"), \". Nothing fancy here, just a bland example of what inner function is. In the above case we can move \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compute_factorial\"), \" outside to the same level as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"factorial\"), \" and\\nout program would run as expected...\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def compute_factorial(N, accumulated=1):\\n    if N<=1:\\n        return accumulated\\n    return compute_factorial(N-1, N*accumulated)\\ndef factorial(N):\\n    if N < 0:\\n        raise ValueError(\\\"Sorry. We don't do that here...\\\")\\n    return compute_factorial(N)\\n'''\\n>>> factorial(10)\\n3628800\\n>>> compute_factorial\\n<function compute_factorial at 0x10188daf0>\\n'''\\n\")), mdx(\"p\", null, \"Although now, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compute_factorial\"), \" is accesible to all other callers who can call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"factorial\"), \". There lies one benifit of inner function: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Encapsulation\")), mdx(\"h3\", null, \"Inner Function Encapsulation + Memory of the outer scope\"), mdx(\"p\", null, \"Dialing things up a notch is the property of inner functions which have access to outer functions scope and thus its variables.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def echo(text, to_upper=False):\\n    def inner_echo():\\n        return \\\"Hah take this: \\\" + ( text.upper() if to_upper else text)\\n    return inner_echo()\\n'''\\n>>> echo(\\\"hello\\\", True)\\n'Hah take this: HELLO'\\n'''\\n\")), mdx(\"p\", null, \"As you can see from the output, inner function have access to variables defined in the scope of the outer function.\"), mdx(\"p\", null, \"Try and guess the execution of the following methods: ( \\uD83D\\uDE09 to a future blog post )\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def test_dict():\\n    memory = {}\\n    def inner_test():\\n        for i in range(10):\\n            memory[i] = i*i\\n    inner_test()\\n    return memory\\n\\ndef test_int():\\n    number = 100\\n    def inner_test():\\n        for i in range(number):\\n            number -= i\\n    inner_test()\\n    return number\\n\")), mdx(\"h3\", null, \"Inner functions and Closures in Python\"), mdx(\"p\", null, \"In python functions are \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.geeksforgeeks.org/first-class-functions-python/\"\n  }), \"first class objects\"), \". Few properties of first class functions: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Function will be a instance of the Object type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Function can be stored in a variable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Function can be passed to other functions as parameters or can be returned from other functions.\")), mdx(\"p\", null, \"Closure is a function object that remembers values in enclosing scopes even if they are not present in memory any longer. Let's look at an example to understand better:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def exponent(number):\\n    def inner_exponent(value):\\n        return number ** value\\n    return inner_exponent\\n'''\\n>>> two_exponent = exponent(2)\\n>>> two_exponent(10)\\n1024\\n>>> two_exponent\\n<function exponent.<locals>.inner_exponent at 0x1018a61f0>\\n'''\\n\")), mdx(\"p\", null, \"In the above example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exponent\"), \" is being used as a factory method which takes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" as an argument and returns a new method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inner_exponent\"), \" which is a function object i.e. which uses the data passed in the outer function for its own execution much later after the outer function has been executed. \"), mdx(\"p\", null, \"To put it another way, the closure \\\"initializes\\\" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inner_exponent()\"), \" and then returns it. Now, whenever you call that newly returned function, it will always see its own private snapshot that includes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \".\"), mdx(\"h3\", null, \"Conclusion \\uD83D\\uDC0D \\uD83D\\uDC0D\"), mdx(\"p\", null, \"Closures can be really powerful when you want to encapsulate information/logic from the caller via inner functions. \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Recap to inner-function/nested functions in Python Here we see the inner function  compute_factorial  being used from the outer-scope of the‚Ä¶","timeToRead":1,"banner":null}},"pageContext":{"slug":"/closure-snake","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}